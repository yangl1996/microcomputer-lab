STACK SEGMENT PARA STACK
	DW 128H DUP(0)
STACK ENDS

DATA SEGMENT
	HOUR DB 0
	MINUTE DB 0
	SECOND DB 0
	INTFLAG DB 0			; 1 FOR INTERRUPT HAPPENED
DATA ENDS

CODE SEGMENT
	ASSUME CS:CODE, SS:STACK, DS:DATA
START:
	; SET IRQ TO GENERATE 1 SEC PULSE
	; CHANNEL 0 = 200, CHANNEL 1 = 5000
	MOV AL, 00010110B
	MOV DX, 0E483H
	OUT DX, AL				; CONFIGURE CHANNEL 0
	MOV AL, 200
	MOV DX, 0E480H
	OUT DX, AL				; SET CHANNEL 0 COUNTER
	MOV AL, 01110110B
	MOV DX, 0E483H
	OUT DX, AL				; CONFIGURE CHANNEL 1
	MOV AX, 5000
	MOV DX, 0E481H
	OUT DX, AL				; LOWER 8 BITS
	MOV AL, AH
	MOV DX, 0E481H
	OUT DX, AL				; HIGHER 8 BITS

	; ENABLE INTERRUPT
	MOV AX, CS
	MOV DS, AX
	MOV DX, OFFSET IRQ
	MOV AX, 250EH			; SET INTERRUPT HANDLER FOR 0E
	INT 21H
	CLI
	MOV DX, 0EC4CH			; ENABLE PCI INTERRUPT LINT1
	MOV AL, 43H
	OUT DX, AL
	INC DX
	MOV AL, 1DH
	OUT DX, AL
	IN AL, 21H				; READ IN CURRENT MASK
	AND AL, 10111111B
	OUT 21H, AL				; UNMASK IRQ 6
	STI						; SET INTERRUPT FLAG

	; SET DATA SEGMENT
	MOV AX, DATA
	MOV DS, AX
	
	; PREPARE AND WAIT FOR NEXT INTERRUPT
NEXT:
	MOV INTFLAG, 0
	MOV AH, 1
	INT 16H
	JNZ GOODBYE				; CHECK FOR KEYBOARD INTERRUPT
LL:
	CMP INTFLAG, 1			; CHECK FOR INTERRUPT (INTFLAG=1)
	JNE LL
	; INTERRUPT HAPPENS!
	MOV INTFLAG, 0

	; DISPLAY TIME
	CALL INCTIME			; INCREASE TIME
	MOV AL, HOUR
	CALL DISP
	MOV DL, ':'
	MOV AH, 02H
	INT 21H
	MOV AL, MINUTE
	CALL DISP
	MOV DL, ':'
	MOV AH, 02H
	INT 21H
	MOV AL, SECOND
	CALL DISP
	MOV DL, 0DH
	MOV AH, 02H
	INT 21H
	MOV DL, 0AH
	INT 21H

	; BEEP
	CMP SECOND, 0
	JNZ NOBEEP
	MOV BL, 200
	CALL BEEP
NOBEEP:
	JMP NEXT				; BACK FOR NEXT INTERRUPT
	
	; RESTORE ENVIRONMENT AND EXIT
GOODBYE:
	IN AL, 21H				; READ IN CURRENT MASK
	OR AL, 40H				; MASK OFF IRQ6
	OUT 21H, AL
	MOV DX, 0EC4CH
	MOV AL, 42H
	OUT DX, AL				; TURN OFF PCI LNT1 INTERRUPT
	STI						; SET INTERRUPT FLAG
	MOV AH, 4CH
	INT 21H					; PROGRAM EXITS

INCTIME PROC NEAR			; INCREASE TIME
	PUSH AX
	MOV AL, SECOND
	ADD AL, 1
	DAA						; INCREASE SECOND
	MOV SECOND, AL
	CMP SECOND, 60H
	JNE	MINNOINC			; IF SECOND >= 60 THEN INC MINUTE
	MOV AL, MINUTE
	ADD AL, 1
	DAA
	MOV MINUTE, AL
	MOV SECOND, 0
MINNOINC:
	CMP MINUTE, 60H
	JNE HOURNOINC			; IF MINUTE >= 60 THEN INC HOUR
	MOV AL, HOUR
	ADD AL, 1
	DAA
	MOV HOUR, AL
	MOV MINUTE, 0
HOURNOINC:
	POP AX
	RET

DISP PROC NEAR
	PUSH DX
	PUSH CX
	MOV CH, AL				; BACKUP AL
	MOV CL, 4
	SHR AL, CL				; HANDLE HIGHER 4 BITS OF AL
	MOV DL, AL
	ADD DL, 30H
	MOV AH, 02H
	INT 21H					; DISP NUM
	MOV AL, CH
	AND AL, 0FH				; HANDLE LOWER 4 BITS OF AL
	MOV DL, AL
	ADD DL, 30H
	MOV AH, 02H
	INT 21H
	POP CX
	POP DX
	RET
DISP ENDP

BEEP PROC NEAR
	PUSH CX
	MOV AL, 10110110B
	OUT 43H, AL
	MOV AX, 1190
	OUT 42H, AL
	MOV AL, AH
	OUT 42H, AL
	IN AL, 61H
	MOV AH, AL
	OR AL, 03H
	OUT 61H, AL
	MOV CX, 0
L0:
	LOOP L0
	DEC BL
	JNZ L0
	MOV AL, AH
	OUT 61H, AL
	POP CX
	RET
BEEP ENDP
	
IRQ PROC FAR
	PUSH AX
	PUSH DX
	PUSH DS
	MOV AX, DATA
	MOV DS, AX				; SET DATA SEGMENT
	MOV INTFLAG, 1
	MOV AL, 20H
	OUT 20H, AL				; SEND EOI TO 8259A
	MOV DX, 0EC4DH
	MOV AL, 1DH
	OUT DX, AL				; CLEAR PCI INTERRUPT STATUS
	POP DS
	POP DX
	POP AX
	IRET
IRQ ENDP
CODE ENDS
END START
